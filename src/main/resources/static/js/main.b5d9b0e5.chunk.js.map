{"version":3,"sources":["store/actions/index.js","store/reducers/loggedInReducer.js","utils/credentialMapper.js","store/reducers/updateCredentialsReducer.js","store/reducers/updateMessageReducer.js","store/reducers/updateUserReducer.js","store/reducers/updateTokenReducer.js","store/reducers/rootReducer.js","utils/credentialUtils.js","comms/commsService.js","store/middleware/addCredentialsMiddleware.js","store/middleware/removeCredentialMiddleware.js","utils/loginPreVerification.js","utils/sessionManager.js","store/middleware/loginMiddleware.js","utils/registrationVerification.js","store/middleware/registrationMiddleware.js","store/middleware/logoutMiddleware.js","store/index.js","components/viewItems/userTextInput.js","utils/resetMessage.js","components/views/login.js","components/views/registration.js","components/viewItems/credentialListItem.js","components/views/lobby.js","components/views/createCredentialView.js","components/views/generalMessageModal.js","components/viewItems/customNavbar.js","index.js"],"names":["updateUser","user","type","updateToken","token","updateMessage","message","addCredentialsToStore","credentials","loggedInAction","loggedIn","loggedInReducer","state","action","credentialsFromServer","length","hasOwnProperty","credentialMapper","map","credential","tempArray","split","updateCredentialsReducer","console","log","filter","updateMessageReducer","userReducer","updateTokenReducer","rootReducer","combineReducers","updateUserReducer","genericMessage","CredentialUtils","isCredentialValid","trimmedCredential","trim","hasEmptySpaces","isEmpty","moreThan15Characters","includes","addCredentialMiddleware","next","value","key","store","getState","fetch","method","body","JSON","stringify","headers","then","res","json","response","dispatch","addCredentialToStore","catch","error","removeCredentialMiddleware","removeCredentialFromStore","verify","email","password","SessionManager","this","unsubscribeListener","storeUserData","userData","sessionStorage","setItem","doesUserDataExist","getItem","getUserData","parse","removeUserData","removeItem","updateSession","subscribe","restoreSession","loginMiddleware","credentialsChecker","data","status","jwt","safe","confirmEmail","confirmPassword","registrationMiddleware","text","logoutMiddleware","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","addCredentialsMiddleware","UserTextInput","props","handleChange","label","className","onChange","name","replace","toLowerCase","placeholder","resetMessage","Login","e","change","target","setState","onClick","attemptLogin","push","to","React","Component","connect","activeView","loginAction","Register","registrationDetails","confirmemail","confirmpassword","attemptRegistration","registerAction","CredentialListItem","removeCurrentCredential","removeCredential","show","removeCredentialDB","Lobby","logout","attemptLogout","element","index","CreateCredentialView","addCredential","addCredentialDB","GeneralMessageModal","CustomNavbar","logOut","ReactDOM","render","exact","path","component","Registration","CreateCredential","document","getElementById"],"mappings":"8PAeaA,EAAa,SAACC,GACvB,MAAO,CACHC,KARmB,cASnBD,KAAMA,IAIDE,EAAc,SAACC,GACxB,MAAO,CACHF,KAZoB,eAapBE,MAAOA,IAIFC,EAAgB,SAACC,GAC1B,MAAO,CACHJ,KArBsB,iBAsBtBI,QAASA,IAWJC,EAAwB,SAACC,GAClC,MAAO,CACHN,KA5CuB,kBA6CvBM,YAAaA,IAmDRC,EAAiB,SAACC,GAC3B,MAAO,CACHR,KA3FiB,YA4FjBQ,SAAUA,ICzFHC,EATS,WAA4B,IAA3BC,EAA0B,wDAAXC,EAAW,uCAC/C,OAAOA,EAAOX,MACV,IDIiB,YCHb,OAAOW,EAAOH,SAClB,QACI,OAAOE,I,QCCbE,EAAwB,SAACN,GAC3B,SAAIA,GAAeA,EAAYO,OAAS,KAC5BP,EAAY,GAAGQ,eAAe,QAK/BC,EAfU,SAACT,GAEtB,OADmBM,EAAsBN,GACrBA,EAAYU,KAAI,SAACC,GACjC,IAAIC,EAAYD,EAAWE,MAAM,KACjC,MAAO,CAAC,IAAOD,EAAU,GAAI,MAASA,EAAU,OAC/CZ,GCgBMc,EAlBkB,WAAyB,IAAxBV,EAAuB,uDAAf,GAAIC,EAAW,uCACrD,OAAOA,EAAOX,MACV,IHJuB,kBGKnB,OAAOe,EAAiBJ,EAAOL,aACnC,IHPsB,iBGSlB,OADAe,QAAQC,IAAR,4CAAiDX,EAAOM,aAClD,GAAN,mBAAWP,GAAX,CAAkBC,EAAOM,aAC7B,IHNyB,oBGQrB,OADAI,QAAQC,IAAR,8CAAmDX,EAAOM,aACnDP,EAAMa,QAAO,SAAAN,GAAU,OAAIA,IAAeN,EAAOM,cAC5D,IHA0B,qBGEtB,OADAI,QAAQC,IAAR,4BACO,GACX,QACI,OAAOZ,ICLJc,EAVc,WAA2B,IAA1Bd,EAAyB,uDAAjB,KAAMC,EAAW,uCACnD,OAAOA,EAAOX,MACV,IJMsB,iBILlB,OAAOW,EAAOP,QAClB,QACI,OAAOM,ICIJe,EATK,WAA2B,IAA1Bf,EAAyB,uDAAjB,KAAMC,EAAW,uCAC1C,OAAOA,EAAOX,MACV,ILKmB,cKJf,OAAOW,EAAOZ,KAClB,QACI,OAAOW,ICIJgB,EATY,WAA2B,IAA1BhB,EAAyB,uDAAjB,KAAMC,EAAW,uCACjD,OAAQA,EAAOX,MACX,INQoB,eMPhB,OAAOW,EAAOT,MAClB,QACI,OAAOQ,ICQJiB,EARKC,YAAgB,CAChC7B,KAAM8B,EACNrB,SAAUC,EACVH,YAAac,EACbU,eAAgBN,EAChBtB,MAAOwB,I,OCZUK,E,kCAAAA,EAEVC,kBAAoB,SAACf,GACxB,IAAIgB,EAAoBhB,EAAWiB,OACnC,OAJaH,EAIAI,eAAeF,KAJfF,EAI2CK,QAAQH,KAJnDF,EAI+EM,qBAAqBJ,IAJpGF,EAOVI,eAAiB,SAAClB,GACrB,OAAOA,EAAWqB,SAAS,MARdP,EAWVK,QAAU,SAACnB,GACd,MAAsB,KAAfA,GAZMc,EAeVM,qBAAuB,SAACpB,GAC3B,OAAOA,EAAWJ,OAAS,IChB5B,IC+BQ0B,EA3BwB,SAAC7B,GAAD,OAAW,SAAC8B,GAAD,OAAU,SAAC7B,GACzD,OAAQA,EAAOX,MACX,IVHgC,2BUIxB+B,EAAgBC,kBAAkBrB,EAAOM,WAAWwB,QAAUV,EAAgBC,kBAAkBrB,EAAOM,WAAWyB,MDPpGzB,ECQAN,EAAOM,WDRKf,ECQOyC,EAAMC,WAAW1C,MDPvD2C,MAAM,uBAAwB,CACjCC,OAAQ,OACRC,KAAMC,KAAKC,UAAUhC,GACrBiC,QAAS,CACL,OAAU,mBACV,eAAgB,mBAChB,cAAgB,UAAhB,OAA2BhD,OCEtBiD,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACMA,GACAX,EAAMY,SAASpD,EAAc,yBAC7BwC,EAAMY,SVuBE,SAACtC,GACjC,MAAO,CACHjB,KAtCsB,iBAuCtBiB,WAAYA,GU1BuBuC,CAAqB7C,EAAOM,cAE3C0B,EAAMY,SAASpD,EAAc,gCAGxCsD,OAAM,SAAAC,GACHrC,QAAQC,IAAIoC,GACZf,EAAMY,SAASpD,EAAc,4BAGjCwC,EAAMY,SAASpD,EAAc,iIAEjC,MACJ,QACIqC,EAAK7B,GD3BY,IAACM,EAAYf,KE4B3ByD,EAxB2B,SAACjD,GAAD,OAAW,SAAC8B,GAAD,OAAU,SAAC7B,GAC5D,OAAQA,EAAOX,MACX,IXJmC,+BSUViB,EELJN,EAAOM,WFKSf,EELGyC,EAAMC,WAAW1C,MFMtD2C,MAAM,0BAA2B,CACpCC,OAAQ,SACRC,KAAMC,KAAKC,UAAUhC,GACrBiC,QAAS,CACL,OAAU,mBACV,eAAgB,mBAChB,cAAgB,UAAhB,OAA2BhD,OEX1BiD,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACEA,GACAX,EAAMY,SAASpD,EAAc,2BAC7BwC,EAAMY,SX6Ce,SAACtC,GACtC,MAAO,CACHjB,KAvDyB,oBAwDzBiB,WAAYA,GWhDe2C,CAA0BjD,EAAOM,cAEhD0B,EAAMY,SAASpD,EAAc,kCAGpCsD,OAAM,SAAAC,GACHrC,QAAQC,IAAIoC,GACZf,EAAMY,SAASpD,EAAc,4BAEjC,MACJ,QACIqC,EAAK7B,GFXe,IAACM,EAAYf,KGP9B2D,EALA,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,SAEpB,OADcD,EAAMxB,SAAS,MAAQwB,EAAMxB,SAAS,MAAQyB,EAASlD,QAAU,GCE7EmD,EACF,aAAe,oBACXC,KAAKC,oBAAsB,MAF7BF,EAKKG,cAAgB,SAACC,GACpBC,eAAeC,QAAQ,YAAatB,KAAKC,UAAUmB,KANrDJ,EASKO,kBAAoB,WACxB,OAAOF,eAAeG,QAAQ,cAV/BR,EAaKS,YAAc,WACjB,OAAOzB,KAAK0B,MAAML,eAAeG,QAAQ,eAd3CR,EAiBKW,eAAiB,WAjBtBX,EAkBOE,sBACLG,eAAeO,WAAW,cAnB5BZ,EAsBKa,cAAgB,WAtBrBb,EAuBOE,oBAAsBvB,EAAMmC,WAAU,WACvCT,eAAeC,QAAQ,YAAatB,KAAKC,UAAUN,EAAMC,iBAxB/DoB,EA4BKe,eAAiB,WACpB,GA7BFf,EA6BWO,oBAAqB,CA7BhCP,EA8BgBE,qBA9BhBF,EA+Bea,gBAET,IAAMT,EAjCZJ,EAiC4BS,cACtB9B,EAAMY,SAAStD,EAAYmE,EAASlE,QACpCyC,EAAMY,SAASzD,EAAWsE,EAASrE,OACnC4C,EAAMY,SAASlD,EAAsB+D,EAAS9D,cAC9CqC,EAAMY,SAAShD,GAAe,IAC9BoC,EAAMY,SAASpD,EAAc,SAK1B6D,QCTAgB,EA/BgB,SAACtE,GAAD,OAAW,SAAC8B,GAAD,OAAU,SAAC7B,GACjD,OAAQA,EAAOX,MACX,IdHa,QcILiF,EAAmBtE,EAAOM,aLebA,EKdAN,EAAOM,WLezB4B,MAAM,qBAAsB,CAC/BC,OAAQ,OACRC,KAAMC,KAAKC,UAAUhC,GACrBiC,QAAS,CACL,OAAU,mBACV,eAAgB,uBKnBXC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAA+B,GACEA,EAAKC,QAA0B,MAAhBD,EAAKC,OACpBxC,EAAMY,SAASpD,EAAc,8BAE7B6D,EAAea,gBACflC,EAAMY,SAAStD,EAAYiF,EAAKE,MAChCzC,EAAMY,SAASzD,EAAWoF,EAAKG,KAAKvB,QACpCnB,EAAMY,SAASlD,EAAsB6E,EAAKG,KAAK/E,cAC/CqC,EAAMY,SAAShD,GAAe,IAC9BoC,EAAMY,SAASpD,EAAc,WAGpCsD,OAAM,SAAAC,GACHrC,QAAQC,IAAIoC,EAAMtD,SAClBuC,EAAMY,SAASpD,EAAc,gCAGjCwC,EAAMY,SAASpD,EAAc,8BAEjC,MACJ,QACIqC,EAAK7B,GLTW,IAACM,KMjBd4C,EAPA,SAAC,GAAsD,IAArDC,EAAoD,EAApDA,MAAOwB,EAA6C,EAA7CA,aAAcvB,EAA+B,EAA/BA,SAAUwB,EAAqB,EAArBA,gBAI5C,OAHczB,EAAMxB,SAAS,MAAQwB,EAAMxB,SAAS,MACpDgD,EAAahD,SAAS,MAAQgD,EAAahD,SAAS,MACpDyB,EAASlD,QAAU,GAAK0E,EAAgB1E,QAAU,GCsBvC2E,EApBuB,SAAC9E,GAAD,OAAW,SAAC8B,GAAD,OAAU,SAAC7B,GACxD,OAAQA,EAAOX,MACX,IhBAgB,WgBCTiF,EAAmBtE,EAAOM,aP2BLA,EO1BAN,EAAOM,WP2BhC4B,MAAM,eAAgB,CACzBC,OAAQ,OACRC,KAAMC,KAAKC,UAAUhC,GACrBiC,QAAS,CACL,OAAU,YACV,eAAgB,uBO/BXC,MAAK,SAAAC,GAAG,OAAIA,EAAIqC,UAChBtC,MAAK,SAAA/C,GAAO,OAAIuC,EAAMY,SAASpD,EAAcC,OAC7CqD,OAAM,SAAAC,GACHrC,QAAQC,IAAIoC,GACZf,EAAMY,SAASpD,EAAcuD,OAGjCf,EAAMY,SAASpD,EAAc,8BAEjC,MACJ,QACIqC,EAAK7B,GPckB,IAACM,KQhBrByE,EAfiB,SAAChF,GAAD,OAAW,SAAC8B,GAAD,OAAU,SAAC7B,GAClD,OAAQA,EAAOX,MACX,IjBAc,SiBCV2C,EAAMY,SAAShD,GAAe,IAC9BoC,EAAMY,SAAStD,EAAY,OAC3B0C,EAAMY,SAASzD,EAAW,OAC1B6C,EAAMY,SAASpD,EAAc,OAC7BwC,EAAMY,SjB6DP,CACHvD,KA5D0B,uBiBDtBgE,EAAeW,iBACf,MACJ,QACInC,EAAK7B,OCPXgF,EAAmBC,OAAOC,sCAAwCC,IAKzDnD,EAJDoD,YAAYpE,EAAmCgE,EACzDK,YAAgBC,EAA0BtC,EAA4BqB,EAAiBQ,EAAwBE,K,4BCRtGQ,EAAgB,SAACC,GAAW,IAC7BC,EAAqCD,EAArCC,aAAcC,EAAuBF,EAAvBE,MAAOrG,EAAgBmG,EAAhBnG,KAAMyC,EAAU0D,EAAV1D,MAEnC,OACI,6BACI,2BAAO6D,UAAW,aAActG,KAAMA,EAAMuG,SAAUH,EAAcI,KAAMH,EAAMI,QAAQ,IAAK,IAAIC,cAAejE,MAAOA,EAAOkE,YAAa3G,MCAxI4G,EAJM,WACjBjE,EAAMY,SAASpD,EAAc,QCIpB0G,EAAb,YACI,WAAYV,GAAQ,IAAD,8BACf,4CAAMA,KAKVC,aAAe,SAACU,GACZ,IAAIC,EAAS,GACbA,EAAOD,EAAEE,OAAOR,MAAQM,EAAEE,OAAOvE,MAEjC,EAAKwE,SAASF,IAVC,EAanBG,QAAU,SAACJ,GAAO,IAAD,EACe,EAAKpG,MAC3BO,EAAa,CAAE,MAFR,EACL6C,MAC6B,SAFxB,EACEC,UAGf,EAAKoC,MAAMgB,aAAalG,GAExB,EAAKgG,SAAS,CACVlD,SAAS,MAlBb,EAAKrD,MAAQ,CAAEoD,MAAO,GAAIC,SAAU,IACpC6C,IAHe,EADvB,sEAyBc,IAAD,EACqB3C,KAAKvD,MAAxBoD,EADF,EACEA,MAAOC,EADT,EACSA,SACPvD,EAAYyD,KAAKkC,MAAjB3F,SACP,OACI,6BACKA,EAAU,kBAAC,IAAD,CAAU4G,MAAI,EAACC,GAAG,iBAGrB,yBAAKf,UAAW,cACZ,wBAAIA,UAAW,eAAf,SACA,kBAAC,EAAD,CAAeF,aAAcnC,KAAKmC,aAAc3D,MAAOqB,EAAOuC,MAAM,QAAQrG,KAAK,UACjF,kBAAC,EAAD,CAAeoG,aAAcnC,KAAKmC,aAAc3D,MAAOsB,EAAUsC,MAAM,WAAWrG,KAAK,aACvF,2BAAOsG,UAAW,UAAWtG,KAAK,SAASkH,QAASjD,KAAKiD,QAASzE,MAAM,UACxE,kBAAC,IAAD,CAAM6D,UAAW,QAASe,GAAI,aAA9B,kBAtC5B,GAA2BC,IAAMC,WA8DlBC,eAfgB,SAAC9G,GAC5B,MAAO,CACH+G,WAAY/G,EAAM+G,WAClBjH,SAAUE,EAAMF,aAIU,SAAC+C,GAC/B,MAAO,CACH4D,aAAc,SAAClG,GACXsC,ErBmBe,SAACtC,GACxB,MAAO,CACHjB,KAjFa,QAkFbiB,WAAYA,GqBtBCyG,CAAYzG,QAKlBuG,CAA6CX,GC/D/Cc,EAAb,YACI,WAAYxB,GAAQ,IAAD,8BACf,4CAAMA,KAKVC,aAAe,SAACU,GACZ,IAAIC,EAAS,GACbA,EAAOD,EAAEE,OAAOR,MAAQM,EAAEE,OAAOvE,MAEjC,EAAKwE,SAASF,IAVC,EAanBG,QAAU,SAACJ,GAAO,IAAD,EAC8C,EAAKpG,MAC1DkH,EAAsB,CAAE,MAFjB,EACL9D,MACsC,aAFjC,EACE+D,aAC6D,SAF/D,EACgB9D,SACqE,gBAFrF,EAC0B+D,iBAGvC,EAAK3B,MAAM4B,oBAAoBH,GAC/B,EAAKX,SAAS,CACVlD,SAAU,GACV+D,gBAAiB,MAlBrB,EAAKpH,MAAQ,CAAEoD,MAAO,GAAI+D,aAAc,GAAI9D,SAAU,GAAI+D,gBAAiB,IAC3ElB,IAHe,EADvB,sEAyBc,IAAD,EACqD3C,KAAKvD,MAAvDoD,EADH,EACGA,MAAO+D,EADV,EACUA,aAAc9D,EADxB,EACwBA,SAAU+D,EADlC,EACkCA,gBACvC,OACI,6BACI,yBAAKxB,UAAW,qBACZ,wBAAIA,UAAW,eAAf,gBACA,kBAAC,EAAD,CAAeF,aAAcnC,KAAKmC,aAAcC,MAAM,QAAQ5D,MAAOqB,EAAO9D,KAAK,UACjF,kBAAC,EAAD,CAAeoG,aAAcnC,KAAKmC,aAAcC,MAAM,gBAAgB5D,MAAOoF,EAAc7H,KAAK,UAChG,kBAAC,EAAD,CAAeoG,aAAcnC,KAAKmC,aAAcC,MAAM,WAAW5D,MAAOsB,EAAU/D,KAAK,aACvF,kBAAC,EAAD,CAAeoG,aAAcnC,KAAKmC,aAAcC,MAAM,mBAAmB5D,MAAOqF,EAAiB9H,KAAK,aACtG,2BAAOsG,UAAW,UAAWtG,KAAK,SAASkH,QAASjD,KAAKiD,QAASzE,MAAM,aACxE,kBAAC,IAAD,CAAM6D,UAAW,QAASe,GAAI,UAA9B,eApCpB,GAA8BE,aAwDfC,eAbgB,SAAC9G,GAC5B,MAAO,MAIuB,SAAC6C,GAC/B,MAAO,CACHwE,oBAAqB,SAAC9G,GAClBsC,EtBmBkB,SAACtC,GAC3B,MAAO,CACHjB,KAxEgB,WAyEhBiB,WAAYA,GsBtBC+G,CAAe/G,QAKrBuG,CAA6CG,GC3D/CM,EAAb,YACI,WAAY9B,GAAQ,IAAD,8BACf,4CAAMA,KAOV+B,wBAA0B,SAACpB,GACvB,EAAKX,MAAMgC,iBAAiB,EAAKlH,aATlB,EAYnBiG,QAAU,SAACJ,GACP,EAAKG,SAAS,CAACmB,MAAO,EAAK1H,MAAM0H,QAXjC,EAAKnH,WAAakF,EAAMlF,WACxB,EAAKP,MAAQ,CACT0H,MAAM,GAJK,EADvB,sEAiBa,IACEA,EAAQnE,KAAKvD,MAAb0H,KACP,OACI,wBAAI9B,UAAW,sBACX,yBAAKY,QAASjD,KAAKiD,QAASZ,UAAW,OAClCrC,KAAKhD,WAAWyB,KAErB,yBAAK4D,UAAW,UAAY8B,EAAM,OAAS,SACtCnE,KAAKhD,WAAWwB,OAErB,yBAAKyE,QAASjD,KAAKiE,wBAAyB5B,UAAW,WAAa8B,EAAM,OAAS,SAAnF,eA3BhB,GAAwCd,IAAMC,WAkD/BC,eAfgB,SAAC9G,GAC5B,MAAO,CACHN,QAASM,EAAMoB,eACftB,SAAUE,EAAMF,aAIU,SAAC+C,GAC/B,MAAO,CACH4E,iBAAkB,SAAClH,GACfsC,EvBesB,SAACtC,GAC/B,MAAO,CACHjB,KAhEmC,8BAiEnCiB,WAAYA,GuBlBCoH,CAAmBpH,QAKzBuG,CAA6CS,GC/C/CK,EAAb,2MAEIC,OAAS,SAACzB,GACN,EAAKX,MAAMqC,iBAHnB,wEAMc,IAAD,EACkCvE,KAAKkC,MAApC7F,EADH,EACGA,YAAaP,EADhB,EACgBA,KAAMS,EADtB,EACsBA,SAC3B,OACI,6BACMA,EAEE,yBAAK8F,UAAW,cACZ,wBAAIA,UAAW,mBAAf,WAA2CvG,EAA3C,KACA,wBAAIuG,UAAW,eAAf,eACA,wBAAIA,UAAW,mBACVhG,GAAeA,EAAYU,KAAI,SAACyH,EAASC,GACtC,OAAO,kBAAC,EAAD,CAAoBhG,IAAK+F,EAAQ/F,IAAKzB,WAAYwH,QAGjE,kBAAC,IAAD,CAAMnC,UAAW,aAAce,GAAI,mBAAnC,mBAVK,kBAAC,IAAD,CAAUD,MAAI,EAACC,GAAG,WAV/C,GAA2BC,IAAMC,WA6ClBC,eAjBgB,SAAC9G,GAC5B,MAAO,CACHJ,YAAaI,EAAMJ,YACnBP,KAAMW,EAAMX,KACZ0H,WAAY/G,EAAM+G,WAClBjH,SAAUE,EAAMF,aAIU,SAAC+C,GAC/B,MAAO,CACHiF,cAAe,WACXjF,ExB6CD,CACHvD,KAvFc,ewB8CPwH,CAA6Cc,GC7C/CK,EAAb,YACI,WAAYxC,GAAQ,IAAD,8BACf,4CAAMA,KAQVC,aAAe,SAACU,GACZ,IAAIC,EAAS,GACbA,EAAOD,EAAEE,OAAOR,MAAQM,EAAEE,OAAOvE,MAEjC,EAAKwE,SAASF,IAbC,EAgBnBG,QAAU,SAACJ,GAAO,IAAD,EACQ,EAAKpG,MACpBO,EAAa,CAAC,IAFP,EACNyB,IACyB,MAFnB,EACDD,OAGZ,EAAK0D,MAAMyC,cAAc3H,GAEzB,EAAKgG,SAAS,CACVvE,IAAI,GACJD,MAAM,MAtBV,EAAK/B,MAAQ,CACTgC,IAAK,GACLD,MAAO,IAEXmE,IANe,EADvB,sEA6Ba,IACGpG,EAAayD,KAAKkC,MAAlB3F,SACR,OACI,6BACMA,EAEF,yBAAK8F,UAAW,eACZ,wBAAIA,UAAW,eAAf,qBACA,2BAAOA,UAAW,aAActG,KAAK,OAAOwG,KAAK,MAAM/D,MAAOwB,KAAKvD,MAAMgC,IAAK6D,SAAUtC,KAAKmC,aAAcO,YAAY,QACvH,2BAAOL,UAAW,aAActG,KAAK,OAAOwG,KAAK,QAAS/D,MAAOwB,KAAKvD,MAAM+B,MAAO8D,SAAUtC,KAAKmC,aAAcO,YAAY,UAC5H,6BACA,2BAAOL,UAAU,UAAUtG,KAAK,SAASyC,MAAM,MAAMyE,QAASjD,KAAKiD,UACnE,kBAAC,IAAD,CAAMZ,UAAW,QAASe,GAAI,gBAA9B,UARS,kBAAC,IAAD,CAAUD,MAAI,EAACC,GAAG,WAjC/C,GAA0CC,IAAMC,WAgEjCC,eAfgB,SAAC9G,GAC5B,MAAO,CACHN,QAASM,EAAMoB,eACftB,SAAUE,EAAMF,aAIU,SAAC+C,GAC/B,MAAO,CACHqF,cAAe,SAAC3H,GACZsC,EzBhBmB,SAACtC,GAC5B,MAAO,CACHjB,KAjDgC,2BAkDhCiB,WAAYA,GyBaC4H,CAAgB5H,QAKtBuG,CAA6CmB,GCnE/CG,GAAb,iLAGQ,OACI,yBAAKxC,UAAW,wBAA0BrC,KAAKkC,MAAM/F,QAAS,OAAO,SAEjE6D,KAAKkC,MAAM/F,SACP,6BACI,2BAAI6D,KAAKkC,MAAM/F,SACf,4BAAQ8G,QAASjD,KAAKkC,MAAMS,cAA5B,YATxB,GAAyCW,aAgC1BC,gBAdgB,SAAC9G,GAC5B,MAAO,CACHN,QAASM,EAAMoB,mBAIW,SAACyB,GAC/B,MAAO,CACHqD,aAAc,WACVrD,EAASpD,EAAc,WAKpBqH,CAA6CsB,IC/B/CC,GAAb,2MAEIC,OAAS,WACL,EAAK7C,MAAMqC,iBAHnB,wEAQc,IACChI,EAAYyD,KAAKkC,MAAjB3F,SACP,OACI,yBAAK8F,UAAW,UACZ,kBAAC,IAAD,CAAMA,UAAW,WAAYe,GAAG,UAAhC,aACC7G,GAAY,uBAAG0G,QAASjD,KAAK+E,OAAQ1C,UAAW,uBAApC,eAb7B,GAAkCiB,aAkCnBC,gBAPS,SAAC9G,GACrB,MAAO,CACHF,SAAUE,EAAMF,aAVG,SAAC+C,GACxB,MAAO,CACHiF,cAAe,WACXjF,E3BiED,CACHvD,KAvFc,e2BiCPwH,CAA6CuB,ICL5DE,IAASC,OAAO,mBApBH,SAAC,GAAe,IAAbvG,EAAY,EAAZA,MACZ,OACI,kBAAC,IAAD,CAAUA,MAAOA,GACZqB,EAAee,iBAChB,kBAAC,GAAD,MACA,kBAAC,IAAD,KACA,kBAAC,GAAD,MACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOoE,OAAK,EAACC,KAAM,CAAC,IAAK,UAAWC,UAAWxC,IAC/C,kBAAC,IAAD,CAAOsC,OAAK,EAACC,KAAK,YAAYC,UAAWC,IACzC,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,kBAAkBC,UAAWE,IAC/C,kBAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,eAAeC,UAAWf,IAC5C,kBAAC,IAAD,CAAUjB,GAAG,WAQjB,CAAM1E,MAAOA,IAAW6G,SAASC,eAAe,W","file":"static/js/main.b5d9b0e5.chunk.js","sourcesContent":["export const ADD_CREDENTIAL = 'ADD_CREDENTIAL'; //should be middleware that will update the credentialstate\r\nexport const ADD_CREDENTIALS = 'ADD_CREDENTIALS'; //should be middleware that will update the credentialstate\r\nexport const REMOVE_CREDENTIAL_DATA_BASE = 'REMOVE_CREDENTIAL_DATA_BASE'\r\nexport const ADD_CREDENTIAL_DATA_BASE = 'ADD_CREDENTIAL_DATA_BASE'\r\nexport const REMOVE_CREDENTIAL = 'REMOVE_CREDENTIAL'; //should be middleware that will update the credentialstate\r\nexport const LOGIN = 'LOGIN'; //should be a middleware\r\nexport const LOGOUT = 'LOGOUT';//should be a middleware\r\nexport const REGISTER = 'REGISTER';//should be a middleware\r\nexport const LOGGED_IN = 'LOGGED_IN';\r\nexport const UPDATE_USER = 'UPDATE_USER';\r\nexport const UPDATE_MESSAGE = 'UPDATE_MESSAGE';\r\nexport const UPDATE_CREDENTIALS = 'UPDATE_CREDENTIALS';\r\nexport const UPDATE_TOKEN = 'UPDATE_TOKEN';\r\nexport const REMOVE_CREDENTIALS = 'REMOVE_CREDENTIALS';\r\n\r\nexport const updateUser = (user) => {\r\n    return {\r\n        type: UPDATE_USER,\r\n        user: user\r\n    }\r\n}\r\n\r\nexport const updateToken = (token) => {\r\n    return {\r\n        type: UPDATE_TOKEN,\r\n        token: token\r\n    }\r\n}\r\n\r\nexport const updateMessage = (message) => {\r\n    return {\r\n        type: UPDATE_MESSAGE,\r\n        message: message\r\n    }\r\n}\r\n\r\nexport const addCredentialToStore = (credential) => {\r\n    return {\r\n        type: ADD_CREDENTIAL,\r\n        credential: credential\r\n    }\r\n}\r\n\r\nexport const addCredentialsToStore = (credentials) => {\r\n    return {\r\n        type: ADD_CREDENTIALS,\r\n        credentials: credentials\r\n    }\r\n}\r\n\r\nexport const addCredentialDB = (credential) => {\r\n    return {\r\n        type: ADD_CREDENTIAL_DATA_BASE,\r\n        credential: credential\r\n    }\r\n}\r\n\r\nexport const removeCredentialFromStore = (credential) => {\r\n    return {\r\n        type: REMOVE_CREDENTIAL,\r\n        credential: credential\r\n    }\r\n}\r\n\r\nexport const removeCredentialDB = (credential) => {\r\n    return {\r\n        type: REMOVE_CREDENTIAL_DATA_BASE,\r\n        credential: credential\r\n    }\r\n}\r\n\r\nexport const removeAllCredentials = () => {\r\n    return {\r\n        type: REMOVE_CREDENTIALS\r\n    }\r\n}\r\n\r\nexport const registerAction = (credential) => {\r\n    return {\r\n        type: REGISTER,\r\n        credential: credential\r\n    }\r\n}\r\n\r\nexport const loginAction = (credential) => {\r\n    return {\r\n        type: LOGIN,\r\n        credential: credential\r\n    }\r\n}\r\n\r\nexport const logoutAction = () => {\r\n    return {\r\n        type: LOGOUT\r\n    }\r\n}\r\n\r\nexport const loggedInAction = (loggedIn) => {\r\n    return {\r\n        type: LOGGED_IN,\r\n        loggedIn: loggedIn\r\n    }\r\n}","import { LOGGED_IN } from '../actions';\r\n\r\nconst loggedInReducer = (state = false, action) => {\r\n    switch(action.type) {\r\n        case LOGGED_IN: \r\n            return action.loggedIn\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default loggedInReducer;","const credentialMapper = (credentials) => {\r\n    const fromServer = credentialsFromServer(credentials);\r\n    return fromServer?  credentials.map((credential) => {\r\n        let tempArray = credential.split(\".\");\r\n        return {\"key\": tempArray[0], \"value\": tempArray[1]}\r\n    }) : credentials\r\n}\r\n\r\nconst credentialsFromServer = (credentials) => {\r\n    if (credentials && credentials.length > 0) {\r\n        return !credentials[0].hasOwnProperty('key');\r\n    }\r\n    return false;\r\n}\r\n\r\nexport default credentialMapper;\r\n","import { REMOVE_CREDENTIAL, REMOVE_CREDENTIALS, ADD_CREDENTIAL, ADD_CREDENTIALS } from \"../actions\"\r\nimport credentialMapper from '../../utils/credentialMapper';\r\n\r\nconst updateCredentialsReducer = (state = [], action) => {\r\n    switch(action.type) {\r\n        case ADD_CREDENTIALS:\r\n            return credentialMapper(action.credentials)\r\n        case ADD_CREDENTIAL:\r\n            console.log(`Adding the following credential + ${action.credential}`)\r\n            return [...state, action.credential];\r\n        case REMOVE_CREDENTIAL:\r\n            console.log(`Removing the following credential + ${action.credential}`)\r\n            return state.filter(credential => credential !== action.credential);\r\n        case REMOVE_CREDENTIALS:\r\n            console.log(`Removing all credentials`)\r\n            return [];    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default updateCredentialsReducer;","import { UPDATE_MESSAGE } from \"../actions\"\r\n\r\nconst updateMessageReducer = (state = null, action) => {\r\n    switch(action.type) {\r\n        case UPDATE_MESSAGE: \r\n            return action.message;\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nexport default updateMessageReducer;","import { UPDATE_USER } from '../actions';\r\n\r\nconst userReducer = (state = null, action) => {\r\n    switch(action.type) {\r\n        case UPDATE_USER: \r\n            return action.user\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default userReducer;","import { UPDATE_TOKEN } from '../actions';\r\n\r\nconst updateTokenReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_TOKEN:\r\n            return action.token\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default updateTokenReducer;","import { combineReducers } from 'redux';\r\nimport loggedInReducer from './loggedInReducer';\r\nimport updateCredentialsReducer from './updateCredentialsReducer';\r\nimport updateMessageReducer from './updateMessageReducer';\r\nimport updateUserReducer from './updateUserReducer';\r\nimport updateTokenReducer from './updateTokenReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    user: updateUserReducer,\r\n    loggedIn: loggedInReducer,\r\n    credentials: updateCredentialsReducer,\r\n    genericMessage: updateMessageReducer,\r\n    token: updateTokenReducer\r\n})\r\n\r\nexport default rootReducer;","export default class CredentialUtils {\r\n\r\n    static isCredentialValid = (credential) => {\r\n        let trimmedCredential = credential.trim();\r\n        return !this.hasEmptySpaces(trimmedCredential) && !this.isEmpty(trimmedCredential) && !this.moreThan15Characters(trimmedCredential);\r\n    }\r\n\r\n    static hasEmptySpaces = (credential) => {\r\n        return credential.includes(\" \")\r\n    }\r\n\r\n    static isEmpty = (credential) => {\r\n        return credential === \"\";\r\n    }\r\n\r\n    static moreThan15Characters = (credential) => {\r\n        return credential.length > 15;\r\n    }\r\n}","export const addCredential = (credential, token) => {\r\n    return fetch('/safe/add/credential', {\r\n        method: 'post',\r\n        body: JSON.stringify(credential),\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        }\r\n    })\r\n}\r\n\r\nexport const removeCredential = (credential, token) => {\r\n    return fetch('/safe/remove/credential', {\r\n        method: 'delete',\r\n        body: JSON.stringify(credential),\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n        }\r\n    })\r\n}\r\n\r\nexport const attemptLogin = (credential) => {\r\n    return fetch('/user/authenticate', {\r\n        method: 'post',\r\n        body: JSON.stringify(credential),\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n}\r\n\r\nexport const attemptRegistration = (credential) => {\r\n    return fetch('/user/create', {\r\n        method: 'post',\r\n        body: JSON.stringify(credential),\r\n        headers: {\r\n            'Accept': 'text/html',\r\n            'Content-Type': 'application/json'\r\n        }\r\n    })\r\n}","import { ADD_CREDENTIAL_DATA_BASE, updateMessage, addCredentialToStore } from '../actions/index';\r\nimport CredentialUtils from '../../utils/credentialUtils';\r\nimport { addCredential } from '../../comms/commsService'\r\nimport store from '../index';\r\nexport const addCredentialMiddleware = (state) => (next) => (action) => {\r\n    switch (action.type) {\r\n        case ADD_CREDENTIAL_DATA_BASE:\r\n            if (CredentialUtils.isCredentialValid(action.credential.value) && CredentialUtils.isCredentialValid(action.credential.key)) {\r\n                addCredential(action.credential, store.getState().token)\r\n                .then(res => res.json())\r\n                .then(response => {\r\n                        if (response) { \r\n                            store.dispatch(updateMessage('Credential was added'))\r\n                            store.dispatch(addCredentialToStore(action.credential))\r\n                        } else {\r\n                            store.dispatch(updateMessage('Credential was not added'))\r\n                        }\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                    store.dispatch(updateMessage(\"Something went wrong\"))\r\n                })\r\n            } else {\r\n                store.dispatch(updateMessage('Credentials were invalid \\n Credentials must not contain empty spaces \\n Credentials must not exceed more than 15 characters'))\r\n            }\r\n            break;\r\n        default:\r\n            next(action);\r\n    }\r\n}\r\n\r\nexport default addCredentialMiddleware;\r\n\r\n//Need to sort out reducer for updating tournaments, currently it is a shambles.\r\n//possibly have differnet actions for deleting and adding credentials","import { REMOVE_CREDENTIAL_DATA_BASE, updateMessage, removeCredentialFromStore } from '../actions/index';\r\nimport { removeCredential } from '../../comms/commsService'\r\nimport store from '../index';\r\n\r\nexport const removeCredentialMiddleware = (state) => (next) => (action) => {\r\n    switch (action.type) {\r\n        case REMOVE_CREDENTIAL_DATA_BASE:\r\n            removeCredential(action.credential, store.getState().token)\r\n            .then(res => res.json())\r\n            .then(response => {\r\n                if (response) { \r\n                    store.dispatch(updateMessage('Credential was removed'))\r\n                    store.dispatch(removeCredentialFromStore(action.credential)) \r\n                } else {\r\n                    store.dispatch(updateMessage('Credential was not removed'))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                store.dispatch(updateMessage(\"Something went wrong\"))\r\n            })\r\n            break;\r\n        default:\r\n            next(action);\r\n    }\r\n  \r\n}\r\n\r\nexport default removeCredentialMiddleware;","const verify = ({email, password}) => {\r\n    const valid = email.includes('.') && email.includes('@') && password.length >= 5\r\n    return valid;\r\n}\r\n\r\nexport default verify;","import store from '../store/index';\r\nimport { updateMessage, updateToken, addCredentialsToStore, updateUser, loggedInAction } from '../store/actions/index';\r\n\r\nclass SessionManager {\r\n    constructor() {\r\n        this.unsubscribeListener = null;\r\n    }\r\n\r\n    static storeUserData = (userData) => {\r\n        sessionStorage.setItem('Iron-Safe', JSON.stringify(userData));\r\n    }\r\n\r\n    static doesUserDataExist = () => {\r\n       return sessionStorage.getItem('Iron-Safe');\r\n    }\r\n\r\n    static getUserData = () => {\r\n        return JSON.parse(sessionStorage.getItem('Iron-Safe'));\r\n    }\r\n\r\n    static removeUserData = () => {\r\n        this.unsubscribeListener();\r\n        sessionStorage.removeItem('Iron-Safe')\r\n    }\r\n\r\n    static updateSession = () => {\r\n        this.unsubscribeListener = store.subscribe(()=> {\r\n            sessionStorage.setItem('Iron-Safe', JSON.stringify(store.getState()));\r\n        })\r\n    }\r\n\r\n    static restoreSession = () => {\r\n        if (this.doesUserDataExist()) {\r\n            if (!this.unsubscribeListener) {\r\n                this.updateSession()\r\n            }\r\n            const userData = this.getUserData();\r\n            store.dispatch(updateToken(userData.token));\r\n            store.dispatch(updateUser(userData.user));\r\n            store.dispatch(addCredentialsToStore(userData.credentials));\r\n            store.dispatch(loggedInAction(true));\r\n            store.dispatch(updateMessage(null))\r\n        }\r\n    }\r\n}\r\n\r\nexport default SessionManager;","import { LOGIN, updateMessage, updateToken, addCredentialsToStore, updateUser, loggedInAction } from '../actions/index';\r\nimport { attemptLogin } from '../../comms/commsService'\r\nimport credentialsChecker from '../../utils/loginPreVerification';\r\nimport SessionManager from '../../utils/sessionManager';\r\nimport store from '../index';\r\n\r\nexport const loginMiddleware = (state) => (next) => (action) => {\r\n    switch (action.type) {\r\n        case LOGIN:\r\n            if (credentialsChecker(action.credential)) {\r\n                attemptLogin(action.credential)\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    if (data.status && data.status !== 202) {\r\n                        store.dispatch(updateMessage(\"Something wrong happened\"))                       \r\n                    } else {\r\n                        SessionManager.updateSession()\r\n                        store.dispatch(updateToken(data.jwt));\r\n                        store.dispatch(updateUser(data.safe.email));\r\n                        store.dispatch(addCredentialsToStore(data.safe.credentials));\r\n                        store.dispatch(loggedInAction(true));\r\n                        store.dispatch(updateMessage(null))\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    console.log(error.message)\r\n                    store.dispatch(updateMessage(\"Something wrong happened\"))\r\n                })\r\n            } else {\r\n                store.dispatch(updateMessage(\"Credentials are not valid\"))\r\n            }\r\n            break;\r\n        default:\r\n            next(action);\r\n    }\r\n}\r\n\r\nexport default loginMiddleware;","const verify = ({email, confirmEmail, password, confirmPassword}) => {\r\n    const valid = email.includes('.') && email.includes('@') &&  \r\n    confirmEmail.includes('.') && confirmEmail.includes('@') && \r\n    password.length >= 5 && confirmPassword.length >= 5\r\n    return valid;\r\n}\r\n\r\nexport default verify;","import { REGISTER, updateMessage } from '../actions/index';\r\nimport { attemptRegistration } from '../../comms/commsService'\r\nimport store from '../index';\r\nimport credentialsChecker from '../../utils/registrationVerification';\r\n\r\nexport const registrationMiddleware = (state) => (next) => (action) => {\r\n    switch (action.type) {\r\n        case REGISTER:\r\n            if(credentialsChecker(action.credential)) {\r\n                attemptRegistration(action.credential)\r\n                .then(res => res.text())\r\n                .then(message => store.dispatch(updateMessage(message)))\r\n                .catch(error => {\r\n                    console.log(error)\r\n                    store.dispatch(updateMessage(error))\r\n                })\r\n            } else {\r\n                store.dispatch(updateMessage(\"Credentials are not valid\"))\r\n            }\r\n            break;\r\n        default:\r\n            next(action);\r\n    }\r\n}\r\n\r\nexport default registrationMiddleware;","import { LOGOUT, updateMessage, updateToken, removeAllCredentials, updateUser, loggedInAction } from '../actions/index';\r\nimport SessionManager from '../../utils/sessionManager';\r\nimport store from '../index';\r\n\r\nexport const logoutMiddleware = (state) => (next) => (action) => {\r\n    switch (action.type) {\r\n        case LOGOUT:\r\n            store.dispatch(loggedInAction(false));\r\n            store.dispatch(updateToken(null));\r\n            store.dispatch(updateUser(null));\r\n            store.dispatch(updateMessage(null));\r\n            store.dispatch(removeAllCredentials());\r\n            SessionManager.removeUserData();\r\n            break;\r\n        default:\r\n            next(action);\r\n    }\r\n}\r\n\r\nexport default logoutMiddleware;","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport rootReducer from './reducers/rootReducer';\r\nimport addCredentialsMiddleware from './middleware/addCredentialsMiddleware';\r\nimport removeCredentialMiddleware from './middleware/removeCredentialMiddleware';\r\nimport loginMiddleware from './middleware/loginMiddleware';\r\nimport registrationMiddleware from './middleware/registrationMiddleware';\r\nimport logoutMiddleware from './middleware/logoutMiddleware';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducer, /* preloadedState, */ composeEnhancers(\r\n    applyMiddleware(addCredentialsMiddleware, removeCredentialMiddleware, loginMiddleware, registrationMiddleware, logoutMiddleware)\r\n));\r\n\r\nexport default store;","import React from 'react';\r\n\r\nexport const UserTextInput = (props) => {\r\n    const { handleChange, label, type, value } = props;\r\n\r\n    return (\r\n        <div>\r\n            <input className={\"textInputs\"} type={type} onChange={handleChange} name={label.replace(\" \", \"\").toLowerCase()} value={value} placeholder={type}/>\r\n        </div>\r\n    )\r\n}","import store from '../store/index';\r\nimport { updateMessage } from '../store/actions/index';\r\n\r\nconst resetMessage = () => {\r\n    store.dispatch(updateMessage(null))\r\n}\r\n\r\nexport default resetMessage;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { UserTextInput } from '../viewItems/userTextInput';\r\nimport { loginAction } from '../../store/actions/index';\r\nimport resetMessage from '../../utils/resetMessage';\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport class Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { email: \"\", password: \"\" }\r\n        resetMessage();\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        let change = {}\r\n        change[e.target.name] = e.target.value\r\n\r\n        this.setState(change)\r\n    }\r\n\r\n    onClick = (e) => {\r\n        const { email, password } = this.state;\r\n        const credential = { 'email': email, 'password': password };\r\n\r\n        this.props.attemptLogin(credential);\r\n\r\n        this.setState({\r\n            password:\"\"\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const {email, password} = this.state;\r\n        const {loggedIn} = this.props;\r\n        return (\r\n            <div>\r\n                {loggedIn? <Redirect push to=\"/credentials\" />\r\n                    :\r\n                    (\r\n                        <div className={'loginPanel'}>\r\n                            <h1 className={\"panel-title\"}>Login</h1>\r\n                            <UserTextInput handleChange={this.handleChange} value={email} label=\"Email\" type=\"email\" />\r\n                            <UserTextInput handleChange={this.handleChange} value={password} label=\"Password\" type=\"password\" />\r\n                            <input className={\"formBtn\"} type=\"submit\" onClick={this.onClick} value=\"Login\"/>\r\n                            <Link className={\"links\"} to={'/register'}>Register</Link>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport const mapStateToProps = (state) => {\r\n    return {\r\n        activeView: state.activeView,\r\n        loggedIn: state.loggedIn\r\n    }\r\n}\r\n\r\nexport const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        attemptLogin: (credential) => {\r\n            dispatch(loginAction(credential));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { UserTextInput } from '../viewItems/userTextInput';\r\nimport { registerAction } from '../../store/actions/index';\r\nimport resetMessage from '../../utils/resetMessage';\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport class Register extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { email: \"\", confirmemail: \"\", password: \"\", confirmpassword: \"\" }\r\n        resetMessage();\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        let change = {}\r\n        change[e.target.name] = e.target.value\r\n\r\n        this.setState(change)\r\n    }\r\n\r\n    onClick = (e) => {\r\n        const { email, confirmemail, password, confirmpassword } = this.state;\r\n        const registrationDetails = { 'email': email, 'confirmEmail': confirmemail, \"password\": password, \"confirmPassword\": confirmpassword };\r\n\r\n        this.props.attemptRegistration(registrationDetails);\r\n        this.setState({\r\n            password: \"\", \r\n            confirmpassword: \"\" \r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { email, confirmemail, password, confirmpassword} = this.state;\r\n        return (\r\n            <div>\r\n                <div className={\"registrationPanel\"}>\r\n                    <h1 className={\"panel-title\"}>Registration</h1>\r\n                    <UserTextInput handleChange={this.handleChange} label=\"Email\" value={email} type=\"email\" />\r\n                    <UserTextInput handleChange={this.handleChange} label=\"Confirm Email\" value={confirmemail} type=\"email\" />\r\n                    <UserTextInput handleChange={this.handleChange} label=\"Password\" value={password} type=\"password\" />\r\n                    <UserTextInput handleChange={this.handleChange} label=\"Confirm Password\" value={confirmpassword} type=\"password\" />\r\n                    <input className={\"formBtn\"} type=\"submit\" onClick={this.onClick} value=\"Register\"/>\r\n                    <Link className={\"links\"} to={'/login'}>Login</Link>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport const mapStateToProps = (state) => {\r\n    return {\r\n    }\r\n}\r\n\r\nexport const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        attemptRegistration: (credential) => {\r\n            dispatch(registerAction(credential));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { removeCredentialDB } from '../../store/actions/index';\r\n\r\nexport class CredentialListItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.credential = props.credential;\r\n        this.state = {\r\n            show: false\r\n        }\r\n    }\r\n\r\n    removeCurrentCredential = (e) => {\r\n        this.props.removeCredential(this.credential);\r\n    }\r\n\r\n    onClick = (e) => {\r\n        this.setState({show: !this.state.show})\r\n    }\r\n\r\n    render(){\r\n        const {show} = this.state;\r\n        return (\r\n            <li className={\"credentialListItem\"}>\r\n                <div onClick={this.onClick} className={\"key\"}> \r\n                    {this.credential.key}\r\n                </div>\r\n                <div className={\"value \" + (show? 'show' : 'hide')}>\r\n                    {this.credential.value}\r\n                </div>\r\n                <div onClick={this.removeCurrentCredential} className={\"remove \" + (show? 'show' : 'hide')}>\r\n                    REMOVE\r\n                </div>\r\n            </li>\r\n        )\r\n    }\r\n}\r\n\r\nexport const mapStateToProps = (state) => {\r\n    return {\r\n        message: state.genericMessage,\r\n        loggedIn: state.loggedIn\r\n    }\r\n}\r\n\r\nexport const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        removeCredential: (credential) => {\r\n            dispatch(removeCredentialDB(credential))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CredentialListItem);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom'\r\nimport CredentialListItem from '../viewItems/credentialListItem';\r\nimport { logoutAction } from '../../store/actions/index';\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport class Lobby extends React.Component {\r\n    \r\n    logout = (e) => {\r\n        this.props.attemptLogout();\r\n    }\r\n\r\n    render() {\r\n        const { credentials, user, loggedIn} = this.props;\r\n        return (\r\n            <div>\r\n                {!loggedIn ? <Redirect push to=\"/\"/> \r\n                : \r\n                    <div className={\"lobbyPanel\"}>\r\n                        <h1 className={\"welcome-message\"}>Welcome {user} </h1>\r\n                        <h1 className={\"panel-title\"}>Credentials</h1>\r\n                        <ul className={\"credential-list\"}>\r\n                            {credentials && credentials.map((element, index) => {\r\n                                return <CredentialListItem key={element.key} credential={element} />\r\n                            })}\r\n                        </ul>\r\n                        <Link className={\"linkButton\"} to={'/add-credential'}>Add Credential</Link>\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport const mapStateToProps = (state) => {\r\n    return {\r\n        credentials: state.credentials,\r\n        user: state.user,\r\n        activeView: state.activeView,\r\n        loggedIn: state.loggedIn\r\n    }\r\n}\r\n\r\nexport const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        attemptLogout: () => {\r\n            dispatch(logoutAction());\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Lobby);","import React from 'react';\r\nimport { addCredentialDB } from '../../store/actions/index';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom'\r\nimport resetMessage from '../../utils/resetMessage';\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport class CreateCredentialView extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            key: \"\",\r\n            value: \"\"\r\n        }\r\n        resetMessage();\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        let change = {}\r\n        change[e.target.name] = e.target.value\r\n        \r\n        this.setState(change)\r\n    }\r\n\r\n    onClick = (e) => {\r\n        const {key, value} = this.state;\r\n        const credential = {'key': key, 'value': value};\r\n        \r\n        this.props.addCredential(credential);\r\n\r\n        this.setState({\r\n            key:\"\",\r\n            value:\"\"\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const { loggedIn } = this.props\r\n        return (\r\n            <div>\r\n                {!loggedIn ? <Redirect push to=\"/\"/> \r\n                :\r\n                <div className={'createPanel'}>\r\n                    <h1 className={\"panel-title\"}>Create Credential</h1>\r\n                    <input className={'textInputs'} type='text' name='key' value={this.state.key} onChange={this.handleChange} placeholder=\"key\"/>\r\n                    <input className={'textInputs'} type='text' name='value'  value={this.state.value} onChange={this.handleChange} placeholder=\"value\"/>\r\n                    <br />\r\n                    <input className=\"formBtn\" type='submit' value=\"Add\" onClick={this.onClick}/>\r\n                    <Link className={\"links\"} to={'/credentials'}>Lobby</Link>\r\n                </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport const mapStateToProps = (state) => {\r\n    return {\r\n        message: state.genericMessage,\r\n        loggedIn: state.loggedIn\r\n    }\r\n}\r\n\r\nexport const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addCredential: (credential) => {\r\n            dispatch(addCredentialDB(credential))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateCredentialView)","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { updateMessage } from '../../store/actions/index';\r\n\r\nexport class GeneralMessageModal extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className={\"generalMessageModal \" + (this.props.message? 'show':'hide')}>\r\n                {\r\n                this.props.message && (\r\n                    <div>\r\n                        <p>{this.props.message}</p>\r\n                        <button onClick={this.props.resetMessage}>Ok</button>\r\n                    </div>\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport const mapStateToProps = (state) => {\r\n    return {\r\n        message: state.genericMessage\r\n    }\r\n}\r\n\r\nexport const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        resetMessage: () => {\r\n            dispatch(updateMessage(null))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GeneralMessageModal);","import React, {Component} from 'react';\r\nimport { logoutAction } from '../../store/actions/index';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nexport class CustomNavbar extends Component {\r\n    \r\n    logOut = () => {\r\n        this.props.attemptLogout();\r\n    }\r\n\r\n    return\r\n    \r\n    render() {\r\n        const {loggedIn} = this.props;\r\n        return (\r\n            <div className={\"navbar\"}>\r\n                <Link className={\"nav-item\"} to=\"/lobby\">Iron-Safe</Link>\r\n                {loggedIn && <p onClick={this.logOut} className={\"logout-nav nav-item\"}>logout</p>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        attemptLogout: () => {\r\n            dispatch(logoutAction());\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        loggedIn: state.loggedIn\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomNavbar);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store/index';\r\nimport Login from './components/views/login';\r\nimport Registration from './components/views/registration';\r\nimport Lobby from './components/views/lobby';\r\nimport CreateCredential from './components/views/createCredentialView';\r\nimport GeneralMessageModal from './components/views/generalMessageModal';\r\nimport SessionManager from './utils/sessionManager';\r\nimport CustomNavBar from './components/viewItems/customNavbar';\r\n\r\nconst Root = ({ store }) => {\r\n    return (\r\n        <Provider store={store}>\r\n            {SessionManager.restoreSession()}\r\n            <GeneralMessageModal />\r\n            <Router>\r\n            <CustomNavBar />\r\n                <Switch>\r\n                    <Route exact path={[\"/\", \"/login\"]} component={Login} />\r\n                    <Route exact path=\"/register\" component={Registration} />\r\n                    <Route exact path=\"/add-credential\" component={CreateCredential} />\r\n                    <Route exact path=\"/credentials\" component={Lobby} />\r\n                    <Redirect to=\"/\" />\r\n                    {/* <Route path=\"\" component={Error} /> */}\r\n                </Switch>\r\n            </Router>\r\n        </Provider>\r\n    )\r\n}\r\n\r\nReactDOM.render(<Root store={store} />, document.getElementById('root'));\r\n"],"sourceRoot":""}